%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.20.0
%% Version source: file
-module(on_deliver_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("on_deliver_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'eventssidecar.v1.OnDeliver'() :: #'eventssidecar.v1.OnDeliver'{}.

-type 'google.protobuf.Timestamp'() :: #'google.protobuf.Timestamp'{}.

-type 'eventssidecar.v1.MatchedACL'() :: #'eventssidecar.v1.MatchedACL'{}.

-export_type([
    'eventssidecar.v1.OnDeliver'/0, 'google.protobuf.Timestamp'/0, 'eventssidecar.v1.MatchedACL'/0
]).
-type '$msg_name'() ::
    'eventssidecar.v1.OnDeliver' | 'google.protobuf.Timestamp' | 'eventssidecar.v1.MatchedACL'.
-type '$msg'() ::
    'eventssidecar.v1.OnDeliver'()
    | 'google.protobuf.Timestamp'()
    | 'eventssidecar.v1.MatchedACL'().
-export_type(['$msg_name'/0, '$msg'/0]).

-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'eventssidecar.v1.OnDeliver' ->
            'encode_msg_eventssidecar.v1.OnDeliver'(id(Msg, TrUserData), TrUserData);
        'google.protobuf.Timestamp' ->
            'encode_msg_google.protobuf.Timestamp'(id(Msg, TrUserData), TrUserData);
        'eventssidecar.v1.MatchedACL' ->
            'encode_msg_eventssidecar.v1.MatchedACL'(id(Msg, TrUserData), TrUserData)
    end.

'encode_msg_eventssidecar.v1.OnDeliver'(Msg, TrUserData) ->
    'encode_msg_eventssidecar.v1.OnDeliver'(Msg, <<>>, TrUserData).

'encode_msg_eventssidecar.v1.OnDeliver'(
    #'eventssidecar.v1.OnDeliver'{
        timestamp = F1,
        username = F2,
        client_id = F3,
        mountpoint = F4,
        topic = F5,
        qos = F6,
        is_retain = F7,
        payload = F8,
        matched_acl = F9,
        persisted = F10
    },
    Bin,
    TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            'e_mfield_eventssidecar.v1.OnDeliver_timestamp'(
                                TrF1, <<Bin/binary, 10>>, TrUserData
                            )
                    end
                end
        end,
    B2 =
        if
            F2 == undefined ->
                B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
        end,
    B3 =
        if
            F3 == undefined ->
                B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
        end,
    B4 =
        if
            F4 == undefined ->
                B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case is_empty_string(TrF4) of
                        true -> B3;
                        false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
        end,
    B5 =
        if
            F5 == undefined ->
                B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case is_empty_string(TrF5) of
                        true -> B4;
                        false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
        end,
    B6 =
        if
            F6 == undefined ->
                B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0 -> B5;
                        true -> e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
                    end
                end
        end,
    B7 =
        if
            F7 == undefined ->
                B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if
                        TrF7 =:= false -> B6;
                        true -> e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData)
                    end
                end
        end,
    B8 =
        if
            F8 == undefined ->
                B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    case iolist_size(TrF8) of
                        0 -> B7;
                        _ -> e_type_bytes(TrF8, <<B7/binary, 66>>, TrUserData)
                    end
                end
        end,
    B9 =
        if
            F9 == undefined ->
                B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= undefined ->
                            B8;
                        true ->
                            'e_mfield_eventssidecar.v1.OnDeliver_matched_acl'(
                                TrF9, <<B8/binary, 74>>, TrUserData
                            )
                    end
                end
        end,
    if
        F10 == undefined ->
            B9;
        true ->
            begin
                TrF10 = id(F10, TrUserData),
                if
                    TrF10 =:= false -> B9;
                    true -> e_type_bool(TrF10, <<B9/binary, 80>>, TrUserData)
                end
            end
    end.

'encode_msg_google.protobuf.Timestamp'(Msg, TrUserData) ->
    'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData).

'encode_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = F1, nanos = F2}, Bin, TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end
    end.

'encode_msg_eventssidecar.v1.MatchedACL'(Msg, TrUserData) ->
    'encode_msg_eventssidecar.v1.MatchedACL'(Msg, <<>>, TrUserData).

'encode_msg_eventssidecar.v1.MatchedACL'(
    #'eventssidecar.v1.MatchedACL'{name = F1, pattern = F2}, Bin, TrUserData
) ->
    B1 =
        if
            F1 == undefined ->
                Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
        end,
    if
        F2 == undefined ->
            B1;
        true ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end
    end.

'e_mfield_eventssidecar.v1.OnDeliver_timestamp'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_eventssidecar.v1.OnDeliver_matched_acl'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_eventssidecar.v1.MatchedACL'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function, e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR =
        case Elem of
            {varint, FNum, N} ->
                BinF = e_varint(FNum bsl 3, Bin),
                e_varint(N, BinF);
            {length_delimited, FNum, Data} ->
                BinF = e_varint(FNum bsl 3 bor 2, Bin),
                BinL = e_varint(byte_size(Data), BinF),
                <<BinL/binary, Data/binary>>;
            {group, FNum, GroupFields} ->
                Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                Bin2 = e_unknown_elems(GroupFields, Bin1),
                e_varint(FNum bsl 3 bor 4, Bin2);
            {fixed32, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 5, Bin),
                <<BinF/binary, V:32/little>>;
            {fixed64, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 1, Bin),
                <<BinF/binary, V:64/little>>
        end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) ->
    Bin.

-compile({nowarn_unused_function, e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) ->
    false;
string_has_chars([]) ->
    false.

decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error, _} = Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error, _} = Reason ->
            erlang:raise(
                error,
                Reason,
                erlang:get_stacktrace()
            );
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('eventssidecar.v1.OnDeliver', Bin, TrUserData) ->
    id('decode_msg_eventssidecar.v1.OnDeliver'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('google.protobuf.Timestamp', Bin, TrUserData) ->
    id('decode_msg_google.protobuf.Timestamp'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('eventssidecar.v1.MatchedACL', Bin, TrUserData) ->
    id('decode_msg_eventssidecar.v1.MatchedACL'(Bin, TrUserData), TrUserData).

'decode_msg_eventssidecar.v1.OnDeliver'(Bin, TrUserData) ->
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        Bin,
        0,
        0,
        0,
        id(undefined, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(false, TrUserData),
        id(<<>>, TrUserData),
        id(undefined, TrUserData),
        id(false, TrUserData),
        TrUserData
    ).

'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_timestamp'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_username'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_client_id'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_mountpoint'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_topic'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<48, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_qos'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_is_retain'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<66, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_payload'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_matched_acl'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<80, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'd_field_eventssidecar.v1.OnDeliver_persisted'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    <<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _
) ->
    #'eventssidecar.v1.OnDeliver'{
        timestamp = F@_1,
        username = F@_2,
        client_id = F@_3,
        mountpoint = F@_4,
        topic = F@_5,
        qos = F@_6,
        is_retain = F@_7,
        payload = F@_8,
        matched_acl = F@_9,
        persisted = F@_10
    };
'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
    Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
) ->
    'dg_read_field_def_eventssidecar.v1.OnDeliver'(
        Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'dg_read_field_def_eventssidecar.v1.OnDeliver'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_eventssidecar.v1.OnDeliver'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'dg_read_field_def_eventssidecar.v1.OnDeliver'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_eventssidecar.v1.OnDeliver_timestamp'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        18 ->
            'd_field_eventssidecar.v1.OnDeliver_username'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        26 ->
            'd_field_eventssidecar.v1.OnDeliver_client_id'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        34 ->
            'd_field_eventssidecar.v1.OnDeliver_mountpoint'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        42 ->
            'd_field_eventssidecar.v1.OnDeliver_topic'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        48 ->
            'd_field_eventssidecar.v1.OnDeliver_qos'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        56 ->
            'd_field_eventssidecar.v1.OnDeliver_is_retain'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        66 ->
            'd_field_eventssidecar.v1.OnDeliver_payload'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        74 ->
            'd_field_eventssidecar.v1.OnDeliver_matched_acl'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        80 ->
            'd_field_eventssidecar.v1.OnDeliver_persisted'(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_eventssidecar.v1.OnDeliver'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                1 ->
                    'skip_64_eventssidecar.v1.OnDeliver'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                2 ->
                    'skip_length_delimited_eventssidecar.v1.OnDeliver'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                3 ->
                    'skip_group_eventssidecar.v1.OnDeliver'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                5 ->
                    'skip_32_eventssidecar.v1.OnDeliver'(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    )
            end
    end;
'dg_read_field_def_eventssidecar.v1.OnDeliver'(
    <<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _
) ->
    #'eventssidecar.v1.OnDeliver'{
        timestamp = F@_1,
        username = F@_2,
        client_id = F@_3,
        mountpoint = F@_4,
        topic = F@_5,
        qos = F@_6,
        is_retain = F@_7,
        payload = F@_8,
        matched_acl = F@_9,
        persisted = F@_10
    }.

'd_field_eventssidecar.v1.OnDeliver_timestamp'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_timestamp'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_timestamp'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_google.protobuf.Timestamp'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF,
        0,
        0,
        F,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_google.protobuf.Timestamp'(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_field_eventssidecar.v1.OnDeliver_username'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_username'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_username'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'd_field_eventssidecar.v1.OnDeliver_client_id'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_client_id'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_client_id'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'd_field_eventssidecar.v1.OnDeliver_mountpoint'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_mountpoint'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_mountpoint'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'd_field_eventssidecar.v1.OnDeliver_topic'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_topic'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_topic'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'd_field_eventssidecar.v1.OnDeliver_qos'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_qos'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_qos'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {
        begin
            <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
            id(Res, TrUserData)
        end,
        Rest
    },
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'd_field_eventssidecar.v1.OnDeliver_is_retain'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_is_retain'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_is_retain'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, TrUserData
    ).

'd_field_eventssidecar.v1.OnDeliver_payload'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_payload'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_payload'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, TrUserData
    ).

'd_field_eventssidecar.v1.OnDeliver_matched_acl'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_matched_acl'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_matched_acl'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id('decode_msg_eventssidecar.v1.MatchedACL'(Bs, TrUserData), TrUserData), Rest2}
    end,
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        if
            Prev == undefined -> NewFValue;
            true -> 'merge_msg_eventssidecar.v1.MatchedACL'(Prev, NewFValue, TrUserData)
        end,
        F@_10,
        TrUserData
    ).

'd_field_eventssidecar.v1.OnDeliver_persisted'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.OnDeliver_persisted'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'd_field_eventssidecar.v1.OnDeliver_persisted'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, TrUserData
    ).

'skip_varint_eventssidecar.v1.OnDeliver'(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'skip_varint_eventssidecar.v1.OnDeliver'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    );
'skip_varint_eventssidecar.v1.OnDeliver'(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'skip_length_delimited_eventssidecar.v1.OnDeliver'(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    'skip_length_delimited_eventssidecar.v1.OnDeliver'(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
'skip_length_delimited_eventssidecar.v1.OnDeliver'(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'skip_group_eventssidecar.v1.OnDeliver'(
    Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'skip_32_eventssidecar.v1.OnDeliver'(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'skip_64_eventssidecar.v1.OnDeliver'(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    'dfp_read_field_def_eventssidecar.v1.OnDeliver'(
        Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData
    ).

'decode_msg_google.protobuf.Timestamp'(Bin, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(
        Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData
    ).

'dfp_read_field_def_google.protobuf.Timestamp'(
    <<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData
) ->
    'd_field_google.protobuf.Timestamp_seconds'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(
    <<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData
) ->
    'd_field_google.protobuf.Timestamp_nanos'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1, nanos = F@_2};
'dfp_read_field_def_google.protobuf.Timestamp'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_google.protobuf.Timestamp'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_google.protobuf.Timestamp'(
    <<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_google.protobuf.Timestamp'(
        Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData
    );
'dg_read_field_def_google.protobuf.Timestamp'(
    <<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            'd_field_google.protobuf.Timestamp_seconds'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            'd_field_google.protobuf.Timestamp_nanos'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_google.protobuf.Timestamp'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    );
                1 ->
                    'skip_64_google.protobuf.Timestamp'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    );
                2 ->
                    'skip_length_delimited_google.protobuf.Timestamp'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    );
                3 ->
                    'skip_group_google.protobuf.Timestamp'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    );
                5 ->
                    'skip_32_google.protobuf.Timestamp'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    )
            end
    end;
'dg_read_field_def_google.protobuf.Timestamp'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1, nanos = F@_2}.

'd_field_google.protobuf.Timestamp_seconds'(
    <<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Timestamp_seconds'(
        Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData
    );
'd_field_google.protobuf.Timestamp_seconds'(
    <<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData
) ->
    {NewFValue, RestF} = {
        begin
            <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>,
            id(Res, TrUserData)
        end,
        Rest
    },
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_google.protobuf.Timestamp_nanos'(
    <<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) when N < 57 ->
    'd_field_google.protobuf.Timestamp_nanos'(
        Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData
    );
'd_field_google.protobuf.Timestamp_nanos'(
    <<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData
) ->
    {NewFValue, RestF} = {
        begin
            <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>,
            id(Res, TrUserData)
        end,
        Rest
    },
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_google.protobuf.Timestamp'(
    <<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData
) ->
    'skip_varint_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_google.protobuf.Timestamp'(
    <<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData
) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_google.protobuf.Timestamp'(
    <<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) when N < 57 ->
    'skip_length_delimited_google.protobuf.Timestamp'(
        Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData
    );
'skip_length_delimited_google.protobuf.Timestamp'(
    <<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_google.protobuf.Timestamp'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_google.protobuf.Timestamp'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_google.protobuf.Timestamp'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_eventssidecar.v1.MatchedACL'(Bin, TrUserData) ->
    'dfp_read_field_def_eventssidecar.v1.MatchedACL'(
        Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData
    ).

'dfp_read_field_def_eventssidecar.v1.MatchedACL'(
    <<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData
) ->
    'd_field_eventssidecar.v1.MatchedACL_name'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_eventssidecar.v1.MatchedACL'(
    <<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData
) ->
    'd_field_eventssidecar.v1.MatchedACL_pattern'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_eventssidecar.v1.MatchedACL'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'eventssidecar.v1.MatchedACL'{name = F@_1, pattern = F@_2};
'dfp_read_field_def_eventssidecar.v1.MatchedACL'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_eventssidecar.v1.MatchedACL'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_eventssidecar.v1.MatchedACL'(
    <<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) when N < 32 - 7 ->
    'dg_read_field_def_eventssidecar.v1.MatchedACL'(
        Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData
    );
'dg_read_field_def_eventssidecar.v1.MatchedACL'(
    <<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            'd_field_eventssidecar.v1.MatchedACL_name'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 ->
            'd_field_eventssidecar.v1.MatchedACL_pattern'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    'skip_varint_eventssidecar.v1.MatchedACL'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    );
                1 ->
                    'skip_64_eventssidecar.v1.MatchedACL'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    );
                2 ->
                    'skip_length_delimited_eventssidecar.v1.MatchedACL'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    );
                3 ->
                    'skip_group_eventssidecar.v1.MatchedACL'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    );
                5 ->
                    'skip_32_eventssidecar.v1.MatchedACL'(
                        Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData
                    )
            end
    end;
'dg_read_field_def_eventssidecar.v1.MatchedACL'(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    #'eventssidecar.v1.MatchedACL'{name = F@_1, pattern = F@_2}.

'd_field_eventssidecar.v1.MatchedACL_name'(
    <<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.MatchedACL_name'(
        Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData
    );
'd_field_eventssidecar.v1.MatchedACL_name'(
    <<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_eventssidecar.v1.MatchedACL'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_eventssidecar.v1.MatchedACL_pattern'(
    <<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) when N < 57 ->
    'd_field_eventssidecar.v1.MatchedACL_pattern'(
        Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData
    );
'd_field_eventssidecar.v1.MatchedACL_pattern'(
    <<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    'dfp_read_field_def_eventssidecar.v1.MatchedACL'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_eventssidecar.v1.MatchedACL'(
    <<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData
) ->
    'skip_varint_eventssidecar.v1.MatchedACL'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_eventssidecar.v1.MatchedACL'(
    <<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData
) ->
    'dfp_read_field_def_eventssidecar.v1.MatchedACL'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_eventssidecar.v1.MatchedACL'(
    <<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) when N < 57 ->
    'skip_length_delimited_eventssidecar.v1.MatchedACL'(
        Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData
    );
'skip_length_delimited_eventssidecar.v1.MatchedACL'(
    <<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_eventssidecar.v1.MatchedACL'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_eventssidecar.v1.MatchedACL'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_eventssidecar.v1.MatchedACL'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_eventssidecar.v1.MatchedACL'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_eventssidecar.v1.MatchedACL'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_eventssidecar.v1.MatchedACL'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_eventssidecar.v1.MatchedACL'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when
    N < (32 - 7)
->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when
    N < (64 - 7)
->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when
    N < (64 - 7)
->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'eventssidecar.v1.OnDeliver' ->
            'merge_msg_eventssidecar.v1.OnDeliver'(Prev, New, TrUserData);
        'google.protobuf.Timestamp' ->
            'merge_msg_google.protobuf.Timestamp'(Prev, New, TrUserData);
        'eventssidecar.v1.MatchedACL' ->
            'merge_msg_eventssidecar.v1.MatchedACL'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, 'merge_msg_eventssidecar.v1.OnDeliver'/3}).
'merge_msg_eventssidecar.v1.OnDeliver'(
    #'eventssidecar.v1.OnDeliver'{
        timestamp = PFtimestamp,
        username = PFusername,
        client_id = PFclient_id,
        mountpoint = PFmountpoint,
        topic = PFtopic,
        qos = PFqos,
        is_retain = PFis_retain,
        payload = PFpayload,
        matched_acl = PFmatched_acl,
        persisted = PFpersisted
    },
    #'eventssidecar.v1.OnDeliver'{
        timestamp = NFtimestamp,
        username = NFusername,
        client_id = NFclient_id,
        mountpoint = NFmountpoint,
        topic = NFtopic,
        qos = NFqos,
        is_retain = NFis_retain,
        payload = NFpayload,
        matched_acl = NFmatched_acl,
        persisted = NFpersisted
    },
    TrUserData
) ->
    #'eventssidecar.v1.OnDeliver'{
        timestamp =
            if
                PFtimestamp /= undefined, NFtimestamp /= undefined ->
                    'merge_msg_google.protobuf.Timestamp'(PFtimestamp, NFtimestamp, TrUserData);
                PFtimestamp == undefined ->
                    NFtimestamp;
                NFtimestamp == undefined ->
                    PFtimestamp
            end,
        username =
            if
                NFusername =:= undefined -> PFusername;
                true -> NFusername
            end,
        client_id =
            if
                NFclient_id =:= undefined -> PFclient_id;
                true -> NFclient_id
            end,
        mountpoint =
            if
                NFmountpoint =:= undefined -> PFmountpoint;
                true -> NFmountpoint
            end,
        topic =
            if
                NFtopic =:= undefined -> PFtopic;
                true -> NFtopic
            end,
        qos =
            if
                NFqos =:= undefined -> PFqos;
                true -> NFqos
            end,
        is_retain =
            if
                NFis_retain =:= undefined -> PFis_retain;
                true -> NFis_retain
            end,
        payload =
            if
                NFpayload =:= undefined -> PFpayload;
                true -> NFpayload
            end,
        matched_acl =
            if
                PFmatched_acl /= undefined, NFmatched_acl /= undefined ->
                    'merge_msg_eventssidecar.v1.MatchedACL'(
                        PFmatched_acl, NFmatched_acl, TrUserData
                    );
                PFmatched_acl == undefined ->
                    NFmatched_acl;
                NFmatched_acl == undefined ->
                    PFmatched_acl
            end,
        persisted =
            if
                NFpersisted =:= undefined -> PFpersisted;
                true -> NFpersisted
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_google.protobuf.Timestamp'/3}).
'merge_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = PFseconds, nanos = PFnanos},
    #'google.protobuf.Timestamp'{seconds = NFseconds, nanos = NFnanos},
    _
) ->
    #'google.protobuf.Timestamp'{
        seconds =
            if
                NFseconds =:= undefined -> PFseconds;
                true -> NFseconds
            end,
        nanos =
            if
                NFnanos =:= undefined -> PFnanos;
                true -> NFnanos
            end
    }.

-compile({nowarn_unused_function, 'merge_msg_eventssidecar.v1.MatchedACL'/3}).
'merge_msg_eventssidecar.v1.MatchedACL'(
    #'eventssidecar.v1.MatchedACL'{name = PFname, pattern = PFpattern},
    #'eventssidecar.v1.MatchedACL'{name = NFname, pattern = NFpattern},
    _
) ->
    #'eventssidecar.v1.MatchedACL'{
        name =
            if
                NFname =:= undefined -> PFname;
                true -> NFname
            end,
        pattern =
            if
                NFpattern =:= undefined -> PFpattern;
                true -> NFpattern
            end
    }.

verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'eventssidecar.v1.OnDeliver' ->
            'v_msg_eventssidecar.v1.OnDeliver'(Msg, [MsgName], TrUserData);
        'google.protobuf.Timestamp' ->
            'v_msg_google.protobuf.Timestamp'(Msg, [MsgName], TrUserData);
        'eventssidecar.v1.MatchedACL' ->
            'v_msg_eventssidecar.v1.MatchedACL'(Msg, [MsgName], TrUserData);
        _ ->
            mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, 'v_msg_eventssidecar.v1.OnDeliver'/3}).
-dialyzer({nowarn_function, 'v_msg_eventssidecar.v1.OnDeliver'/3}).
'v_msg_eventssidecar.v1.OnDeliver'(
    #'eventssidecar.v1.OnDeliver'{
        timestamp = F1,
        username = F2,
        client_id = F3,
        mountpoint = F4,
        topic = F5,
        qos = F6,
        is_retain = F7,
        payload = F8,
        matched_acl = F9,
        persisted = F10
    },
    Path,
    TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> 'v_submsg_google.protobuf.Timestamp'(F1, [timestamp | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [username | Path], TrUserData)
    end,
    if
        F3 == undefined -> ok;
        true -> v_type_string(F3, [client_id | Path], TrUserData)
    end,
    if
        F4 == undefined -> ok;
        true -> v_type_string(F4, [mountpoint | Path], TrUserData)
    end,
    if
        F5 == undefined -> ok;
        true -> v_type_string(F5, [topic | Path], TrUserData)
    end,
    if
        F6 == undefined -> ok;
        true -> v_type_int32(F6, [qos | Path], TrUserData)
    end,
    if
        F7 == undefined -> ok;
        true -> v_type_bool(F7, [is_retain | Path], TrUserData)
    end,
    if
        F8 == undefined -> ok;
        true -> v_type_bytes(F8, [payload | Path], TrUserData)
    end,
    if
        F9 == undefined -> ok;
        true -> 'v_submsg_eventssidecar.v1.MatchedACL'(F9, [matched_acl | Path], TrUserData)
    end,
    if
        F10 == undefined -> ok;
        true -> v_type_bool(F10, [persisted | Path], TrUserData)
    end,
    ok;
'v_msg_eventssidecar.v1.OnDeliver'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'eventssidecar.v1.OnDeliver'}, X, Path).

-compile({nowarn_unused_function, 'v_submsg_google.protobuf.Timestamp'/3}).
-dialyzer({nowarn_function, 'v_submsg_google.protobuf.Timestamp'/3}).
'v_submsg_google.protobuf.Timestamp'(Msg, Path, TrUserData) ->
    'v_msg_google.protobuf.Timestamp'(Msg, Path, TrUserData).

-compile({nowarn_unused_function, 'v_msg_google.protobuf.Timestamp'/3}).
-dialyzer({nowarn_function, 'v_msg_google.protobuf.Timestamp'/3}).
'v_msg_google.protobuf.Timestamp'(
    #'google.protobuf.Timestamp'{seconds = F1, nanos = F2}, Path, TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_int64(F1, [seconds | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_int32(F2, [nanos | Path], TrUserData)
    end,
    ok;
'v_msg_google.protobuf.Timestamp'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'google.protobuf.Timestamp'}, X, Path).

-compile({nowarn_unused_function, 'v_submsg_eventssidecar.v1.MatchedACL'/3}).
-dialyzer({nowarn_function, 'v_submsg_eventssidecar.v1.MatchedACL'/3}).
'v_submsg_eventssidecar.v1.MatchedACL'(Msg, Path, TrUserData) ->
    'v_msg_eventssidecar.v1.MatchedACL'(Msg, Path, TrUserData).

-compile({nowarn_unused_function, 'v_msg_eventssidecar.v1.MatchedACL'/3}).
-dialyzer({nowarn_function, 'v_msg_eventssidecar.v1.MatchedACL'/3}).
'v_msg_eventssidecar.v1.MatchedACL'(
    #'eventssidecar.v1.MatchedACL'{name = F1, pattern = F2}, Path, TrUserData
) ->
    if
        F1 == undefined -> ok;
        true -> v_type_string(F1, [name | Path], TrUserData)
    end,
    if
        F2 == undefined -> ok;
        true -> v_type_string(F2, [pattern | Path], TrUserData)
    end,
    ok;
'v_msg_eventssidecar.v1.MatchedACL'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'eventssidecar.v1.MatchedACL'}, X, Path).

-compile({nowarn_unused_function, v_type_int32/3}).
-dialyzer({nowarn_function, v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when is_integer(N), -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function, v_type_int64/3}).
-dialyzer({nowarn_function, v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when
    is_integer(N), -9223372036854775808 =< N, N =< 9223372036854775807
->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function, v_type_bool/3}).
-dialyzer({nowarn_function, v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function, v_type_string/3}).
-dialyzer({nowarn_function, v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).
-dialyzer({nowarn_function, v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).
-dialyzer({nowarn_function, prettify_path/1}).
prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [
        {{msg, 'eventssidecar.v1.OnDeliver'}, [
            #field{
                name = timestamp,
                fnum = 1,
                rnum = 2,
                type = {msg, 'google.protobuf.Timestamp'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = username, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []
            },
            #field{
                name = client_id,
                fnum = 3,
                rnum = 4,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = mountpoint,
                fnum = 4,
                rnum = 5,
                type = string,
                occurrence = optional,
                opts = []
            },
            #field{
                name = topic, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []
            },
            #field{name = qos, fnum = 6, rnum = 7, type = int32, occurrence = optional, opts = []},
            #field{
                name = is_retain, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []
            },
            #field{
                name = payload, fnum = 8, rnum = 9, type = bytes, occurrence = optional, opts = []
            },
            #field{
                name = matched_acl,
                fnum = 9,
                rnum = 10,
                type = {msg, 'eventssidecar.v1.MatchedACL'},
                occurrence = optional,
                opts = []
            },
            #field{
                name = persisted,
                fnum = 10,
                rnum = 11,
                type = bool,
                occurrence = optional,
                opts = []
            }
        ]},
        {{msg, 'google.protobuf.Timestamp'}, [
            #field{
                name = seconds, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []
            },
            #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
        ]},
        {{msg, 'eventssidecar.v1.MatchedACL'}, [
            #field{
                name = name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []
            },
            #field{
                name = pattern, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []
            }
        ]}
    ].

get_msg_names() ->
    ['eventssidecar.v1.OnDeliver', 'google.protobuf.Timestamp', 'eventssidecar.v1.MatchedACL'].

get_group_names() -> [].

get_msg_or_group_names() ->
    ['eventssidecar.v1.OnDeliver', 'google.protobuf.Timestamp', 'eventssidecar.v1.MatchedACL'].

get_enum_names() -> [].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).

find_msg_def('eventssidecar.v1.OnDeliver') ->
    [
        #field{
            name = timestamp,
            fnum = 1,
            rnum = 2,
            type = {msg, 'google.protobuf.Timestamp'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = username, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []
        },
        #field{
            name = client_id, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []
        },
        #field{
            name = mountpoint, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []
        },
        #field{name = topic, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
        #field{name = qos, fnum = 6, rnum = 7, type = int32, occurrence = optional, opts = []},
        #field{name = is_retain, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []},
        #field{name = payload, fnum = 8, rnum = 9, type = bytes, occurrence = optional, opts = []},
        #field{
            name = matched_acl,
            fnum = 9,
            rnum = 10,
            type = {msg, 'eventssidecar.v1.MatchedACL'},
            occurrence = optional,
            opts = []
        },
        #field{
            name = persisted, fnum = 10, rnum = 11, type = bool, occurrence = optional, opts = []
        }
    ];
find_msg_def('google.protobuf.Timestamp') ->
    [
        #field{name = seconds, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []},
        #field{name = nanos, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []}
    ];
find_msg_def('eventssidecar.v1.MatchedACL') ->
    [
        #field{name = name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
        #field{name = pattern, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}
    ];
find_msg_def(_) ->
    error.

find_enum_def(_) -> error.

-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).

-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).

get_service_names() -> [].

get_service_def(_) -> error.

get_rpc_names(_) -> error.

find_rpc_def(_, _) -> error.

-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"eventssidecar.v1.OnDeliver">>) -> 'eventssidecar.v1.OnDeliver';
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) -> 'google.protobuf.Timestamp';
fqbin_to_msg_name(<<"eventssidecar.v1.MatchedACL">>) -> 'eventssidecar.v1.MatchedACL';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin('eventssidecar.v1.OnDeliver') -> <<"eventssidecar.v1.OnDeliver">>;
msg_name_to_fqbin('google.protobuf.Timestamp') -> <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin('eventssidecar.v1.MatchedACL') -> <<"eventssidecar.v1.MatchedACL">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).

-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).

-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_package_name() -> 'eventssidecar.v1'.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.

source_basename() -> "on_deliver.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["on_deliver.proto", "timestamp.proto", "matched_acl.proto"].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["on_deliver", "timestamp", "matched_acl"].

get_msg_containment("on_deliver") -> ['eventssidecar.v1.OnDeliver'];
get_msg_containment("timestamp") -> ['google.protobuf.Timestamp'];
get_msg_containment("matched_acl") -> ['eventssidecar.v1.MatchedACL'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).

get_pkg_containment("on_deliver") -> 'eventssidecar.v1';
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment("matched_acl") -> 'eventssidecar.v1';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("on_deliver") -> [];
get_service_containment("timestamp") -> [];
get_service_containment("matched_acl") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("on_deliver") -> [];
get_rpc_containment("timestamp") -> [];
get_rpc_containment("matched_acl") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).

get_enum_containment("on_deliver") -> [];
get_enum_containment("timestamp") -> [];
get_enum_containment("matched_acl") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"eventssidecar.v1.OnDeliver">>) -> "on_deliver";
get_proto_by_msg_name_as_fqbin(<<"eventssidecar.v1.MatchedACL">>) -> "matched_acl";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).

-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).

-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_protos_by_pkg_name_as_fqbin(<<"eventssidecar.v1">>) -> ["matched_acl", "on_deliver"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) -> ["timestamp"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).

gpb_version_as_string() ->
    "4.20.0".

gpb_version_as_list() ->
    [4, 20, 0].

gpb_version_source() ->
    "file".
